"""
Agente offline para quando LLMs n√£o est√£o dispon√≠veis.
"""

import logging
import streamlit as st
from typing import Dict, Any
from tools import ALL_TOOLS

logger = logging.getLogger(__name__)

class OfflineAgent:
    """Agente que funciona sem LLM, usando regras pr√©-definidas."""
    
    def __init__(self):
        """Inicializa o agente offline."""
        self.tools = {tool.name: tool for tool in ALL_TOOLS}
        self.keyword_tool_mapping = {
            # Mapeamento de palavras-chave para ferramentas
            
            # Descri√ß√£o dos dados
            'vis√£o geral': 'get_data_description',
            'overview': 'get_data_description',
            'descri√ß√£o': 'get_data_description',
            'info': 'get_data_description',
            'tipos de dados': 'get_data_description',
            'num√©ricos': 'get_data_description',
            'categ√≥ricos': 'get_data_description',
            
            # Estat√≠sticas
            'estat√≠stica': 'get_descriptive_statistics',
            'statistics': 'get_descriptive_statistics',
            'm√©dia': 'get_descriptive_statistics',
            'mediana': 'get_descriptive_statistics',
            'desvio': 'get_descriptive_statistics',
            'vari√¢ncia': 'get_descriptive_statistics',
            'tend√™ncia central': 'get_descriptive_statistics',
            'variabilidade': 'get_descriptive_statistics',
            'm√≠nimo': 'get_descriptive_statistics',
            'm√°ximo': 'get_descriptive_statistics',
            'intervalo': 'get_descriptive_statistics',
            
            # Distribui√ß√µes
            'histograma': 'plot_histogram',
            'histogram': 'plot_histogram',
            'distribui√ß√£o': 'plot_histogram',
            'distribution': 'plot_histogram',
            'frequentes': 'plot_histogram',
            'frequ√™ncia': 'plot_histogram',
            
            # Outliers
            'boxplot': 'plot_boxplot',
            'outlier': 'plot_boxplot',
            'outliers': 'plot_multiple_boxplots',
            'at√≠picos': 'plot_multiple_boxplots',
            'anomalias': 'plot_multiple_boxplots',
            'todos': 'plot_multiple_boxplots',
            'todas': 'plot_multiple_boxplots',
            
            # Correla√ß√µes
            'correla√ß√£o': 'plot_correlation_heatmap',
            'correlation': 'plot_correlation_heatmap',
            'heatmap': 'plot_correlation_heatmap',
            'relacionadas': 'plot_correlation_heatmap',
            'influ√™ncia': 'plot_correlation_heatmap',
            
            # Scatter
            'scatter': 'plot_scatter',
            'dispers√£o': 'plot_scatter',
            'rela√ß√£o': 'plot_scatter',
            'versus': 'plot_scatter',
            
            # Insights
            'conclus√£o': 'generate_insights_and_conclusions',
            'conclus√µes': 'generate_insights_and_conclusions',
            'insights': 'generate_insights_and_conclusions',
            'resumo': 'generate_insights_and_conclusions',
            'padr√µes': 'generate_insights_and_conclusions',
            'tend√™ncias': 'generate_insights_and_conclusions',
            'clusters': 'generate_insights_and_conclusions',
            'agrupamentos': 'generate_insights_and_conclusions',
            'descobertas': 'generate_insights_and_conclusions',
            'recomenda√ß√µes': 'generate_insights_and_conclusions'
        }
    
    def invoke(self, inputs: Dict[str, Any], callbacks=None) -> Dict[str, Any]:
        """
        Processa uma pergunta usando l√≥gica baseada em regras.
        
        Args:
            inputs: Dicion√°rio com 'input' contendo a pergunta
            callbacks: Callbacks opcionais
            
        Returns:
            Dicion√°rio com 'output' contendo a resposta
        """
        query = inputs.get('input', '').lower()
        logger.info(f"Offline agent processing: {query}")
        
        # Tentar identificar a ferramenta apropriada
        tool_name = self._identify_tool(query)
        
        if tool_name:
            # Executar a ferramenta
            tool = self.tools[tool_name]
            
            # Extrair par√¢metros se necess√°rio
            params = self._extract_parameters(query, tool_name)
            
            try:
                # Executar ferramenta
                logger.info(f"Executing tool: {tool_name} with params: {params}")
                result = tool.func(**params)
                
                # Formatar a resposta de forma amig√°vel
                formatted_output = self._format_response(tool_name, result, params)
                
                # Preparar resposta
                response = {
                    'output': formatted_output,
                    'intermediate_steps': [(MockAction(tool_name), result)]
                }
                
                # Adicionar mensagem explicativa
                if hasattr(st, 'warning'):
                    st.warning("ü§ñ Modo Offline: Usando an√°lise baseada em regras (LLM indispon√≠vel)")
                
                return response
                
            except Exception as e:
                logger.error(f"Error executing tool {tool_name}: {e}")
                return {
                    'output': f"Erro ao executar {tool_name}: {str(e)}",
                    'intermediate_steps': []
                }
        else:
            # N√£o conseguiu identificar ferramenta
            return self._suggest_options()
    
    def _identify_tool(self, query: str) -> str:
        """Identifica qual ferramenta usar baseado em palavras-chave e contexto."""
        query_lower = query.lower()
        
        # Palavras que indicam an√°lise de TODAS as colunas
        all_indicators = ['todas', 'todos', 'all', 'cada', 'completo', 'completa', 
                          'geral', 'overview', 'm√∫ltiplos', 'm√∫ltiplas', 'conjunto']
        
        # Verifica se h√° coluna espec√≠fica mencionada
        specific_column = None
        if 'df' in st.session_state and st.session_state.df is not None:
            df = st.session_state.df
            for col in df.columns:
                if col.lower() in query_lower:
                    specific_column = col
                    break
        
        # 1. VIS√ÉO GERAL / DESCRI√á√ÉO
        if any(word in query_lower for word in ['vis√£o geral', 'overview', 'descri√ß√£o', 'descrever', 
                                                 'tipos de dados', 'info', 'informa√ß√µes']):
            return 'get_data_description'
        
        # 2. ESTAT√çSTICAS DESCRITIVAS
        if any(word in query_lower for word in ['estat√≠stica', 'statistics', 'm√©dia', 'mediana', 
                                                 'desvio', 'vari√¢ncia', 'm√≠nimo', 'm√°ximo', 
                                                 'tend√™ncia central', 'variabilidade', 'intervalo']):
            # Se menciona "todas" ou n√£o especifica coluna, analisar todas
            if any(word in query_lower for word in all_indicators) or not specific_column:
                return 'get_descriptive_statistics'
            # Se menciona coluna espec√≠fica
            elif specific_column:
                return 'get_descriptive_statistics'
            else:
                return 'get_descriptive_statistics'
        
        # 3. HISTOGRAMA / DISTRIBUI√á√ÉO
        if any(word in query_lower for word in ['histograma', 'histogram', 'distribui√ß√£o', 
                                                 'distribution', 'frequ√™ncia']):
            # Histograma sempre precisa de coluna espec√≠fica
            if specific_column:
                return 'plot_histogram'
            # Se n√£o h√° coluna, sugerir estat√≠sticas descritivas
            return 'get_descriptive_statistics'
        
        # 4. BOXPLOT / OUTLIERS
        if any(word in query_lower for word in ['boxplot', 'box plot', 'outlier', 'outliers', 
                                                 'at√≠picos', 'anomalias']):
            # Se menciona "todas" ou n√£o especifica coluna
            if any(word in query_lower for word in all_indicators) or not specific_column:
                return 'plot_multiple_boxplots'
            # Se menciona coluna espec√≠fica
            elif specific_column:
                return 'plot_boxplot'
            else:
                # Por padr√£o, mostrar todas para an√°lise de outliers
                return 'plot_multiple_boxplots'
        
        # 5. CORRELA√á√ÉO / RELACIONAMENTO
        if any(word in query_lower for word in ['correla√ß√£o', 'correlation', 'heatmap', 
                                                 'relacionadas', 'relacionamento', 'influ√™ncia']):
            return 'plot_correlation_heatmap'
        
        # 6. SCATTER / DISPERS√ÉO
        if any(word in query_lower for word in ['scatter', 'dispers√£o', 'versus', 'vs', 
                                                 'rela√ß√£o entre', 'comparar']):
            # Scatter precisa de duas colunas
            return 'plot_scatter'
        
        # 7. INSIGHTS / CONCLUS√ïES
        if any(word in query_lower for word in ['conclus√£o', 'conclus√µes', 'insights', 'resumo',
                                                 'padr√µes', 'tend√™ncias', 'descobertas', 
                                                 'recomenda√ß√µes', 'an√°lise completa', 'sintetizar']):
            return 'generate_insights_and_conclusions'
        
        # 8. PALAVRAS-CHAVE ESPEC√çFICAS DE AN√ÅLISE
        if any(word in query_lower for word in ['valores √∫nicos', 'nulos', 'missing', 'faltantes']):
            return 'get_data_description'
        
        if any(word in query_lower for word in ['clusters', 'agrupamentos', 'grupos']):
            return 'generate_insights_and_conclusions'
        
        # 9. FALLBACK: Tentar identificar baseado em contexto geral
        if any(word in query_lower for word in ['analisar', 'an√°lise', 'mostrar', 'exibir']):
            # Se tem coluna espec√≠fica
            if specific_column:
                # Decidir baseado em outras palavras
                if 'distribui' in query_lower:
                    return 'plot_histogram'
                else:
                    return 'get_descriptive_statistics'
            # Se n√£o tem coluna, vis√£o geral
            else:
                return 'get_data_description'
        
        return None
    
    def _extract_parameters(self, query: str, tool_name: str) -> Dict[str, Any]:
        """Extrai par√¢metros da query para a ferramenta com intelig√™ncia contextual."""
        params = {}
        query_lower = query.lower()
        
        # Ferramentas que N√ÉO precisam de par√¢metros
        if tool_name in ['plot_multiple_boxplots', 'plot_correlation_heatmap', 
                         'get_data_description', 'generate_insights_and_conclusions']:
            return params
        
        # Obter DataFrame se dispon√≠vel
        df = None
        if 'df' in st.session_state and st.session_state.df is not None:
            df = st.session_state.df
        
        # 1. FERRAMENTAS QUE PRECISAM DE UMA COLUNA
        if tool_name in ['plot_histogram', 'plot_boxplot']:
            if df is not None:
                # Procurar nome de coluna na query
                for col in df.columns:
                    # Verifica√ß√£o exata (case insensitive)
                    if col.lower() in query_lower:
                        params['column'] = col
                        return params
                    # Verifica√ß√£o parcial para colunas com underscore ou h√≠fen
                    col_parts = col.replace('_', ' ').replace('-', ' ').lower()
                    if col_parts in query_lower:
                        params['column'] = col
                        return params
                
                # Se n√£o encontrou coluna mas √© histograma/boxplot, pegar primeira num√©rica
                numeric_cols = df.select_dtypes(include=['number']).columns
                if len(numeric_cols) > 0:
                    params['column'] = numeric_cols[0]
        
        # 2. ESTAT√çSTICAS DESCRITIVAS (opcional column)
        elif tool_name == 'get_descriptive_statistics':
            if df is not None:
                # Verificar se menciona coluna espec√≠fica
                for col in df.columns:
                    if col.lower() in query_lower:
                        params['column'] = col
                        return params
                # Se n√£o especifica, retorna sem par√¢metro (analisar√° todas)
                return params
        
        # 3. SCATTER PLOT (precisa de 2 colunas)
        elif tool_name == 'plot_scatter':
            if df is not None:
                cols_found = []
                numeric_cols = df.select_dtypes(include=['number']).columns
                
                # Procurar colunas mencionadas
                for col in numeric_cols:
                    if col.lower() in query_lower:
                        cols_found.append(col)
                
                # Procurar palavras-chave especiais
                if 'versus' in query_lower or ' vs ' in query_lower or ' x ' in query_lower:
                    # Tentar extrair padr√£o "A versus B" ou "A vs B"
                    import re
                    patterns = [
                        r'(\w+)\s+versus\s+(\w+)',
                        r'(\w+)\s+vs\s+(\w+)',
                        r'(\w+)\s+x\s+(\w+)',
                        r'entre\s+(\w+)\s+e\s+(\w+)'
                    ]
                    
                    for pattern in patterns:
                        match = re.search(pattern, query_lower)
                        if match:
                            col1, col2 = match.groups()
                            # Verificar se s√£o colunas v√°lidas
                            valid_cols = []
                            for col_name in [col1, col2]:
                                for actual_col in numeric_cols:
                                    if col_name in actual_col.lower():
                                        valid_cols.append(actual_col)
                                        break
                            
                            if len(valid_cols) == 2:
                                params['x_column'] = valid_cols[0]
                                params['y_column'] = valid_cols[1]
                                return params
                
                # Se encontrou 2+ colunas, usar as primeiras duas
                if len(cols_found) >= 2:
                    params['x_column'] = cols_found[0]
                    params['y_column'] = cols_found[1]
                # Se encontrou apenas 1, procurar correla√ß√£o mais forte
                elif len(cols_found) == 1:
                    # Pegar coluna com maior correla√ß√£o
                    corr_matrix = df[numeric_cols].corr()
                    col_corrs = corr_matrix[cols_found[0]].abs().sort_values(ascending=False)
                    # Pegar segunda maior (primeira √© consigo mesma)
                    if len(col_corrs) > 1:
                        params['x_column'] = cols_found[0]
                        params['y_column'] = col_corrs.index[1]
                # Se n√£o encontrou nenhuma, usar as duas primeiras num√©ricas
                elif len(numeric_cols) >= 2:
                    params['x_column'] = numeric_cols[0]
                    params['y_column'] = numeric_cols[1]
        
        return params
    
    def _format_response(self, tool_name: str, result, params: Dict[str, Any]) -> str:
        """
        Formata a resposta da ferramenta de forma amig√°vel.
        
        Args:
            tool_name: Nome da ferramenta executada
            result: Resultado da ferramenta
            params: Par√¢metros usados
            
        Returns:
            Resposta formatada em string
        """
        import plotly.graph_objects as go
        
        # Se o resultado √© uma figura Plotly, retornar como est√°
        if isinstance(result, go.Figure):
            return result
        
        # Formata√ß√£o espec√≠fica por ferramenta
        formatted = f"## üìä Resultado da An√°lise\n\n"
        
        if tool_name == 'get_data_description':
            formatted += "### Vis√£o Geral do Dataset\n\n"
            formatted += str(result)
            
        elif tool_name == 'get_descriptive_statistics':
            formatted += "### Estat√≠sticas Descritivas\n\n"
            if params.get('column'):
                formatted += f"**An√°lise da coluna:** `{params['column']}`\n\n"
            else:
                formatted += "**An√°lise de todas as colunas num√©ricas**\n\n"
            
            # Processar o resultado para melhor formata√ß√£o
            if isinstance(result, str):
                # Se j√° √© string, adicionar formata√ß√£o markdown
                lines = result.split('\n')
                formatted_lines = []
                
                for line in lines:
                    # Destacar t√≠tulos
                    if '**' in line or 'üìà' in line or 'üìä' in line:
                        formatted_lines.append(line)
                    # Formatar tabelas de dados
                    elif any(stat in line.lower() for stat in ['count', 'mean', 'std', 'min', 'max', '25%', '50%', '75%']):
                        # Adicionar formata√ß√£o de c√≥digo para tabelas
                        if not line.strip().startswith('```'):
                            formatted_lines.append(f"```\n{line}")
                        else:
                            formatted_lines.append(line)
                    else:
                        formatted_lines.append(line)
                
                # Garantir que blocos de c√≥digo sejam fechados
                result_text = '\n'.join(formatted_lines)
                if '```' in result_text and result_text.count('```') % 2 != 0:
                    result_text += '\n```'
                    
                formatted += result_text
            else:
                formatted += str(result)
                
        elif tool_name == 'generate_insights_and_conclusions':
            formatted = str(result)  # J√° vem bem formatado
            
        elif tool_name in ['plot_histogram', 'plot_boxplot', 'plot_multiple_boxplots', 
                          'plot_correlation_heatmap', 'plot_scatter']:
            # Para visualiza√ß√µes, adicionar contexto
            formatted += f"### Visualiza√ß√£o: {tool_name.replace('plot_', '').replace('_', ' ').title()}\n\n"
            
            if params:
                formatted += "**Par√¢metros utilizados:**\n"
                for key, value in params.items():
                    formatted += f"- {key}: `{value}`\n"
                formatted += "\n"
            
            # Retornar a figura diretamente
            return result
            
        else:
            # Fallback gen√©rico
            formatted += str(result)
        
        # Adicionar rodap√© informativo
        formatted += "\n\n---\n"
        formatted += "*üìù An√°lise realizada em modo offline (sem IA). "
        formatted += "Para an√°lises mais sofisticadas, configure um modelo de linguagem.*"
        
        return formatted
    
    def _suggest_options(self) -> Dict[str, Any]:
        """Retorna sugest√µes quando n√£o consegue processar."""
        suggestions = """
## ü§ñ **Modo Offline Ativo** (LLM indispon√≠vel)

N√£o consegui identificar qual an√°lise voc√™ deseja. Por favor, seja mais espec√≠fico.

### üìä **An√°lises Dispon√≠veis:**

**Descri√ß√£o dos Dados:**
- `"vis√£o geral dos dados"` - Informa√ß√µes gerais sobre o dataset
- `"tipos de dados"` - Tipos de cada coluna

**Estat√≠sticas:**
- `"estat√≠sticas descritivas"` - Estat√≠sticas de todas as colunas
- `"estat√≠sticas da coluna [nome]"` - Estat√≠sticas de uma coluna espec√≠fica
- `"m√©dia e desvio padr√£o"` - Medidas de tend√™ncia central

**Visualiza√ß√µes:**
- `"histograma da coluna [nome]"` - Distribui√ß√£o de uma vari√°vel
- `"boxplot da coluna [nome]"` - An√°lise de outliers de uma coluna
- `"boxplot de todas as colunas"` - Outliers de todas as vari√°veis
- `"matriz de correla√ß√£o"` - Correla√ß√µes entre vari√°veis
- `"gr√°fico de dispers√£o entre [col1] e [col2]"` - Rela√ß√£o entre duas vari√°veis

**Insights:**
- `"gerar conclus√µes"` - An√°lise completa com insights

### üí° **Exemplos de Uso:**
```
"mostre as estat√≠sticas da coluna Amount"
"crie um histograma da coluna V1"
"an√°lise de outliers em todas as colunas"
"qual a correla√ß√£o entre as vari√°veis?"
```

### ‚ö†Ô∏è **Dica:**
Mencione o nome exato das colunas do seu dataset para melhores resultados.
        """
        
        return {
            'output': suggestions,
            'intermediate_steps': []
        }

class MockAction:
    """Classe mock para simular a√ß√£o do agente."""
    def __init__(self, tool_name):
        self.tool = tool_name

# Inst√¢ncia global
offline_agent = OfflineAgent()
